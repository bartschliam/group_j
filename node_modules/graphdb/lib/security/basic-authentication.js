"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicAuthentication = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Authentication = require('./authentication');

var HttpRequestBuilder = require('../http/http-request-builder');
/**
 * Basic authentication type class.
 * Used for basic authentication against secured gdb server.
 *
 * @class
 * @author Teodossi Dossev
 */


var BasicAuthentication = /*#__PURE__*/function (_Authentication) {
  _inherits(BasicAuthentication, _Authentication);

  var _super = _createSuper(BasicAuthentication);

  function BasicAuthentication() {
    _classCallCheck(this, BasicAuthentication);

    return _super.apply(this, arguments);
  }

  _createClass(BasicAuthentication, [{
    key: "getLoginRequestBuilder",

    /**
     * @override
     * @return {HttpRequestBuilder} requestBuilder
     */
    value: function getLoginRequestBuilder() {
      var username = this.clientConfig.getUsername();
      var pass = this.clientConfig.getPass();
      var credentials = "".concat(username, ":").concat(pass);
      return HttpRequestBuilder.httpGet("/rest/security/authenticatedUser").addAuthorizationHeader("Basic ".concat(this.toBase64(credentials)));
    }
    /**
     * Converts string to Base64
     * @param {String} string
     * @return {string} converted string
     */

  }, {
    key: "toBase64",
    value: function toBase64(string) {
      return Buffer.from(string).toString('base64');
    }
    /**
     * @override
     * @return {string} token
     */

  }, {
    key: "getResponseAuthToken",
    value: function getResponseAuthToken(response) {
      return response.config.headers['authorization'];
    }
  }]);

  return BasicAuthentication;
}(Authentication);

exports.BasicAuthentication = BasicAuthentication;
module.exports = BasicAuthentication;