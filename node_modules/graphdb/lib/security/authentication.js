"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Authentication = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * An abstract class that specifies common methods for different types
 * of authentication. Concrete authentication types must extend
 * this class and override it's methods
 *
 * @abstract
 * @class
 * @author Teodossi Dossev
 */
var Authentication = /*#__PURE__*/function () {
  /**
   * Constructor.
   * @param {ClientConfig} clientConfig
   */
  function Authentication(clientConfig) {
    _classCallCheck(this, Authentication);

    this.clientConfig = clientConfig;
  }
  /**
   * Returns authentication type related {@link HttpRequestBuilder}
   * login request builder
  */


  _createClass(Authentication, [{
    key: "getLoginRequestBuilder",
    value: function getLoginRequestBuilder() {
      throw new Error('Method #getLoginRequestBuilder() must be implemented!');
    }
    /**
     * Returns authentication type related {string}
     * token from response
     */

  }, {
    key: "getResponseAuthToken",
    value: function getResponseAuthToken() {
      throw new Error('Method #getResponseAuthToken() must be implemented!');
    }
  }]);

  return Authentication;
}();

exports.Authentication = Authentication;
module.exports = Authentication;