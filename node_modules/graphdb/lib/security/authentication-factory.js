"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthenticationFactory = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BasicAuthentication = require('./basic-authentication');

var GdbTokenAuthentication = require('./gdb-token-authentication');
/**
 * Factory to create concrete authentication type, based on
 * client configuration.
 *
 * @class
 * @author Teodossi Dossev
 */


var AuthenticationFactory = /*#__PURE__*/function () {
  function AuthenticationFactory() {
    _classCallCheck(this, AuthenticationFactory);
  }

  _createClass(AuthenticationFactory, [{
    key: "getAuthenticationType",

    /**
     * Concrete authentication type generator.
     * @param {ClientConfig} clientConfig
     * @return {BasicAuthentication | GdbTokenAuthentication}
     */
    value: function getAuthenticationType(clientConfig) {
      if (clientConfig.getBasicAuthentication()) {
        return new BasicAuthentication(clientConfig);
      } else if (clientConfig.getGdbTokenAuthentication()) {
        return new GdbTokenAuthentication(clientConfig);
      } else {
        throw Error('Authentication is not configured properly');
      }
    }
  }]);

  return AuthenticationFactory;
}();

exports.AuthenticationFactory = AuthenticationFactory;
module.exports = AuthenticationFactory;