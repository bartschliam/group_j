"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppSettings = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Application settings help you to configure the default behavior
 * of the GraphDB Workbench.
 * Use with extreme caution, as the changes that are made to the
 * application settings may possibly change the behavior of the
 * GraphDB Workbench for the logged-in user or for all users
 * if logged in as admin.
 *
 *  @class
 *  @author Teodossi Dossev
 */
var AppSettings = /*#__PURE__*/function () {
  /**
   * Constructor.
   * @param {boolean} defaultInference This is the default value for
   * the Include inferred data in results option in the Workbench's SPARQL
   * editor. It is taken each time a new tab is created.
   * @param {boolean} defaultSameas This is the default value for
   * the Expand results over owl:SameAs option in the Workbench's
   * SPARQL editor. It is taken each time a new tab is created.
   * @param {boolean} ignoreSharedQueries Whether to ignore
   * shared between users queries.
   * @param {boolean} executeCount For each query without limit
   * sent through the SPARQL editor, an additional query is sent
   * to determine the total number of results.
   */
  function AppSettings(defaultInference, defaultSameas, ignoreSharedQueries, executeCount) {
    _classCallCheck(this, AppSettings);

    this.defaultInference = defaultInference;
    this.defaultSameas = defaultSameas;
    this.ignoreSharedQueries = ignoreSharedQueries;
    this.executeCount = executeCount;
  }
  /**
   * DefaultInference setter.
   * @param {boolean} defaultInference <code>true</code> if is enabled and
   * <code>false</code> otherwise.
   * @return {AppSettings}
   */


  _createClass(AppSettings, [{
    key: "setDefaultInference",
    value: function setDefaultInference(defaultInference) {
      this.defaultInference = defaultInference;
      return this;
    }
    /**
     * DefaultSameas setter.
     * @param {boolean} defaultSameas <code>true</code> if is enabled and
     * <code>false</code> otherwise.
     * @return {AppSettings}
     */

  }, {
    key: "setDefaultSameas",
    value: function setDefaultSameas(defaultSameas) {
      this.defaultSameas = defaultSameas;
      return this;
    }
    /**
     * Ignores queries, shared between users.
     * @param {boolean} ignoreSharedQueries <code>true</code> if ignored and
     * <code>false</code> otherwise.
     * @return {AppSettings}
     */

  }, {
    key: "setIgnoreSharedQueries",
    value: function setIgnoreSharedQueries(ignoreSharedQueries) {
      this.ignoreSharedQueries = ignoreSharedQueries;
      return this;
    }
    /**
     * Count all SPARQL results setter.
     * @param {boolean} executeCount <code>true</code> if is enabled and
     * <code>false</code> otherwise.
     * @return {AppSettings}
     */

  }, {
    key: "setExecuteCount",
    value: function setExecuteCount(executeCount) {
      this.executeCount = executeCount;
      return this;
    }
    /**
     * AppSettings to json getter
     * @return {Object} Application settings as key value pairs object
     */

  }, {
    key: "toJson",
    value: function toJson() {
      return {
        DEFAULT_INFERENCE: this.defaultInference,
        DEFAULT_SAMEAS: this.defaultSameas,
        IGNORE_SHARED_QUERIES: this.ignoreSharedQueries,
        EXECUTE_COUNT: this.executeCount
      };
    }
  }]);

  return AppSettings;
}();

exports.AppSettings = AppSettings;
module.exports = AppSettings;