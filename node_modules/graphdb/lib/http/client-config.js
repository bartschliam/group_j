"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BASIC_AUTH = 'BASIC';
var GDB_TOKEN = 'GDB_TOKEN';
var OFF = 'OFF';
/**
 * Abstract configuration wrapper used for initialization of concrete
 * Client instances. Concrete client configuration wrappers must extend
 * this class and override it's methods if necessary.
 *
 * @abstract
 * @author Mihail Radkov
 * @author Svilen Velikov
 * @author Teodossi Dossev
 */

var ClientConfig = /*#__PURE__*/function () {
  /**
   * Client configuration constructor.
   *
   * @param {string} endpoint server base URL that will be prepend
   * to all server requests
   */
  function ClientConfig(endpoint) {
    _classCallCheck(this, ClientConfig);

    this.setEndpoint(endpoint);
  }
  /**
   * Sets the default headers map for each HTTP request.
   *
   * @param {Object<string, string>} headers the default headers
   * @return {this} the concrete configuration config for method chaining
   */


  _createClass(ClientConfig, [{
    key: "setHeaders",
    value: function setHeaders(headers) {
      this.headers = headers;
      return this;
    }
    /**
     * Returns the default headers for each HTTP request.
     *
     * @return {Object<string, string>} the default headers map
     */

  }, {
    key: "getHeaders",
    value: function getHeaders() {
      return this.headers;
    }
    /**
     * @return {string} the username
     */

  }, {
    key: "getUsername",
    value: function getUsername() {
      return this.username;
    }
    /**
     * @return {string} the user password
     */

  }, {
    key: "getPass",
    value: function getPass() {
      return this.pass;
    }
    /**
     * @return {boolean} if the user should be re-logged in after token expires
     */

  }, {
    key: "getKeepAlive",
    value: function getKeepAlive() {
      return this.keepAlive;
    }
    /**
     * @param {boolean} keepAlive
     * @return {this} the concrete configuration config for method chaining
     */

  }, {
    key: "setKeepAlive",
    value: function setKeepAlive(keepAlive) {
      this.keepAlive = keepAlive;
      return this;
    }
    /**
     * Username and password for user logging setter.
     * Sets basic authentication as client authentication type.
     *
     * @param {string} [username]
     * @param {string} [pass]
     *
     * @return {this} the concrete configuration config for method chaining
     */

  }, {
    key: "useBasicAuthentication",
    value: function useBasicAuthentication(username, pass) {
      this.username = username;
      this.pass = pass;
      this.switchAuthentication(BASIC_AUTH);
      return this;
    }
    /**
     * @return {boolean} [basicAuth] if use Basic Auth
     */

  }, {
    key: "getBasicAuthentication",
    value: function getBasicAuthentication() {
      return this.basicAuth;
    }
    /**
     * @private
     * @param {string} auth authentication type
     */

  }, {
    key: "switchAuthentication",
    value: function switchAuthentication(auth) {
      this.basicAuth = auth === BASIC_AUTH;
      this.gdbTokenAuth = auth === GDB_TOKEN;
    }
    /**
     * @return {boolean} [gdbTokenAuth] if use Gdb Token Auth
     */

  }, {
    key: "getGdbTokenAuthentication",
    value: function getGdbTokenAuthentication() {
      return this.gdbTokenAuth;
    }
    /**
     * Username and password for user logging setter.
     * Sets gdb token authentication as client authentication type.
     * *
     * @param {string} [username]
     * @param {string} [pass]
     *
     * @return {this} the concrete configuration config for method chaining
     */

  }, {
    key: "useGdbTokenAuthentication",
    value: function useGdbTokenAuthentication(username, pass) {
      this.username = username;
      this.pass = pass;
      this.switchAuthentication(GDB_TOKEN);
      return this;
    }
    /**
     * Disables authentication.
     */

  }, {
    key: "disableAuthentication",
    value: function disableAuthentication() {
      this.switchAuthentication(OFF);
    }
    /**
     * Sets the server's endpoint URL.
     *
     * @param {string} endpoint the endpoint URL
     * @return {this} the current config for method chaining
     */

  }, {
    key: "setEndpoint",
    value: function setEndpoint(endpoint) {
      if (endpoint && (typeof endpoint === 'string' || endpoint instanceof String)) {
        this.endpoint = endpoint;
        return this;
      } else {
        throw new Error('Invalid Endpoint parameter!');
      }
    }
    /**
     * Returns the server's endpoint URL.
     * @return {string} the endpoint URL
     */

  }, {
    key: "getEndpoint",
    value: function getEndpoint() {
      return this.endpoint;
    }
    /**
     * Returns <code>true</code> if basic or gdb token authentication
     * is enabled. <code>false</code> otherwise.
     *
     * @return {boolean} is authentication enabled
     */

  }, {
    key: "shouldAuthenticate",
    value: function shouldAuthenticate() {
      return this.basicAuth || this.gdbTokenAuth;
    }
  }]);

  return ClientConfig;
}();

module.exports = ClientConfig;